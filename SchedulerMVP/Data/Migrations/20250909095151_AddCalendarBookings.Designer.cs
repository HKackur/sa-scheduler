// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchedulerMVP.Data;

#nullable disable

namespace SchedulerMVP.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250909095151_AddCalendarBookings")]
    partial class AddCalendarBookings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("SchedulerMVP.Data.Entities.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParentAreaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParentAreaId");

                    b.HasIndex("Path");

                    b.HasIndex("PlaceId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("SchedulerMVP.Data.Entities.AreaLeaf", b =>
                {
                    b.Property<Guid>("AreaId")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<Guid>("LeafId")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.HasKey("AreaId", "LeafId");

                    b.HasIndex("AreaId");

                    b.HasIndex("LeafId");

                    b.ToTable("AreaLeafs");
                });

            modelBuilder.Entity("SchedulerMVP.Data.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("EndMin")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("StartMin")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("GroupId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("SchedulerMVP.Data.Entities.BookingTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("TEXT");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EndMin")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ScheduleTemplateId")
                        .HasColumnType("TEXT");

                    b.Property<int>("StartMin")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ScheduleTemplateId", "DayOfWeek", "StartMin");

                    b.ToTable("BookingTemplates");
                });

            modelBuilder.Entity("SchedulerMVP.Data.Entities.CalendarBooking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("EndMin")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SourceTemplateId")
                        .HasColumnType("TEXT");

                    b.Property<int>("StartMin")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("GroupId");

                    b.HasIndex("SourceTemplateId");

                    b.ToTable("CalendarBookings");
                });

            modelBuilder.Entity("SchedulerMVP.Data.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ColorHex")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("SchedulerMVP.Data.Entities.Leaf", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("TEXT");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Leafs");
                });

            modelBuilder.Entity("SchedulerMVP.Data.Entities.Place", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("DefaultDurationMin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("SnapMin")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VisibleEndMin")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VisibleStartMin")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("SchedulerMVP.Data.Entities.ScheduleTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("ScheduleTemplates");
                });

            modelBuilder.Entity("SchedulerMVP.Data.Entities.Area", b =>
                {
                    b.HasOne("SchedulerMVP.Data.Entities.Area", "ParentArea")
                        .WithMany()
                        .HasForeignKey("ParentAreaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchedulerMVP.Data.Entities.Place", "Place")
                        .WithMany("Areas")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentArea");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("SchedulerMVP.Data.Entities.AreaLeaf", b =>
                {
                    b.HasOne("SchedulerMVP.Data.Entities.Area", "Area")
                        .WithMany("AreaLeafs")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulerMVP.Data.Entities.Leaf", "Leaf")
                        .WithMany("AreaLeafs")
                        .HasForeignKey("LeafId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Leaf");
                });

            modelBuilder.Entity("SchedulerMVP.Data.Entities.Booking", b =>
                {
                    b.HasOne("SchedulerMVP.Data.Entities.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulerMVP.Data.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("SchedulerMVP.Data.Entities.BookingTemplate", b =>
                {
                    b.HasOne("SchedulerMVP.Data.Entities.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulerMVP.Data.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulerMVP.Data.Entities.ScheduleTemplate", "ScheduleTemplate")
                        .WithMany("Bookings")
                        .HasForeignKey("ScheduleTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Group");

                    b.Navigation("ScheduleTemplate");
                });

            modelBuilder.Entity("SchedulerMVP.Data.Entities.CalendarBooking", b =>
                {
                    b.HasOne("SchedulerMVP.Data.Entities.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulerMVP.Data.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulerMVP.Data.Entities.BookingTemplate", "SourceTemplate")
                        .WithMany("CalendarBookings")
                        .HasForeignKey("SourceTemplateId");

                    b.Navigation("Area");

                    b.Navigation("Group");

                    b.Navigation("SourceTemplate");
                });

            modelBuilder.Entity("SchedulerMVP.Data.Entities.Leaf", b =>
                {
                    b.HasOne("SchedulerMVP.Data.Entities.Place", "Place")
                        .WithMany("Leafs")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("SchedulerMVP.Data.Entities.ScheduleTemplate", b =>
                {
                    b.HasOne("SchedulerMVP.Data.Entities.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("SchedulerMVP.Data.Entities.Area", b =>
                {
                    b.Navigation("AreaLeafs");
                });

            modelBuilder.Entity("SchedulerMVP.Data.Entities.BookingTemplate", b =>
                {
                    b.Navigation("CalendarBookings");
                });

            modelBuilder.Entity("SchedulerMVP.Data.Entities.Leaf", b =>
                {
                    b.Navigation("AreaLeafs");
                });

            modelBuilder.Entity("SchedulerMVP.Data.Entities.Place", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("Leafs");
                });

            modelBuilder.Entity("SchedulerMVP.Data.Entities.ScheduleTemplate", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
