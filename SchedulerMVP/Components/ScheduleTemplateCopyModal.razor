@inject SchedulerMVP.Services.IScheduleTemplateService TemplateService
@inject SchedulerMVP.Services.UIState UI

@if (IsOpen)
{
    <div class="modal-backdrop" style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.5); z-index: 2000;" @onclick="OnBackdrop"></div>
    <div class="bm-modal">
        <h3 class="bm-title">Skapa kopia</h3>
        <div class="bm-field">
            <label class="bm-label">Mallnamn</label>
            <input class="tb-select" value="@name" @oninput="OnNameInput" placeholder="Ange namn" />
        </div>
        <div class="bm-actions">
            <button type="button" @onclick="OnCancel" class="btn-outline">Avbryt</button>
            <button type="button" @onclick="OnCopy" class="btn-primary" disabled="@string.IsNullOrWhiteSpace(name)">Spara</button>
        </div>
    </div>
    <style>
        .bm-modal{position:fixed;top:50px;left:50%;transform:translateX(-50%);background:#fff;color:#0f1720;padding:28px;z-index:4000;border:1px solid #e6e7ea;border-radius:12px;min-width:560px;max-width:720px;width:90vw;box-shadow:0 8px 28px rgba(16,24,40,.18);max-height:80vh;overflow-y:auto}
        .bm-title{margin:0 0 20px 0;font-size:28px;font-weight:800;letter-spacing:-.02em}
        .bm-actions{display:flex;gap:12px;justify-content:flex-end;margin-top:8px}
        .btn-outline{padding:10px 16px;border:1px solid #d1d5db;border-radius:10px;background:#fff;color:#0f1720}
        .btn-primary{padding:10px 16px;border:none;border-radius:10px;background:#0b1e34;color:#fff}
    </style>
}

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnCopied { get; set; }

    private string name = string.Empty;
    private string originalTemplateName = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        if (IsOpen && UI.SelectedTemplateId is Guid templateId)
        {
            var template = await TemplateService.GetByIdAsync(templateId);
            if (template != null)
            {
                originalTemplateName = template.Name;
                name = $"Kopia av {originalTemplateName}";
            }
        }
    }

    private void OnNameInput(ChangeEventArgs e) => name = e.Value?.ToString() ?? string.Empty;

    private async Task OnCopy()
    {
        if (UI.SelectedTemplateId is Guid templateId && !string.IsNullOrWhiteSpace(name))
        {
            var clone = await TemplateService.SaveAsNewAsync(templateId, name);
            UI.SelectedTemplateId = clone.Id;
            await OnCopied.InvokeAsync();
            await CloseAsync();
        }
    }

    private async Task OnCancel() => await CloseAsync();
    private async Task OnBackdrop(MouseEventArgs _) => await CloseAsync();

    private async Task CloseAsync()
    {
        IsOpen = false;
        await OnClose.InvokeAsync();
    }
}
