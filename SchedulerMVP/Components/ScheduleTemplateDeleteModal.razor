@inject SchedulerMVP.Services.IScheduleTemplateService TemplateService
@inject SchedulerMVP.Services.UIState UI

@if (IsOpen)
{
    <div class="modal-backdrop" style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.5); z-index: 2000;" @onclick="OnBackdrop"></div>
    <div class="bm-modal">
        <h3 class="bm-title">Radera veckomall</h3>
        <div class="bm-field">
            <p class="bm-text">Vill du radera mallen <strong>@currentName</strong>@(bookingCount > 0 ? $" med {bookingCount} bokningar" : "")?</p>
        </div>
        <div class="bm-actions">
            <button type="button" @onclick="OnCancel" class="btn-outline">Avbryt</button>
            <button type="button" @onclick="OnDelete" class="btn-danger">Radera mallen</button>
        </div>
    </div>
    <style>
        .bm-modal{position:fixed;top:50px;left:50%;transform:translateX(-50%);background:#fff;color:#0f1720;padding:28px;z-index:4000;border:1px solid #e6e7ea;border-radius:12px;min-width:560px;max-width:720px;width:90vw;box-shadow:0 8px 28px rgba(16,24,40,.18);max-height:80vh;overflow-y:auto}
        .bm-title{margin:0 0 20px 0;font-size:28px;font-weight:800;letter-spacing:-.02em}
        .bm-text{margin:0;font-size:16px}
        .bm-actions{display:flex;gap:12px;justify-content:flex-end;margin-top:8px}
        .btn-outline{padding:10px 16px;border:1px solid #d1d5db;border-radius:10px;background:#fff;color:#0f1720}
        .btn-danger{padding:10px 16px;border:none;border-radius:10px;background:#dc3545;color:#fff}
    </style>
}

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnDeleted { get; set; }

    private string currentName = string.Empty;
    private int bookingCount = 0;

    protected override async Task OnParametersSetAsync()
    {
        if (IsOpen && UI.SelectedTemplateId is Guid id)
        {
            var t = await TemplateService.GetByIdAsync(id);
            currentName = t?.Name ?? string.Empty;
            bookingCount = t?.Bookings?.Count ?? 0;
        }
    }

    private async Task OnDelete()
    {
        if (UI.SelectedTemplateId is Guid id)
        {
            await TemplateService.DeleteTemplateAsync(id);
            UI.SelectedTemplateId = null;
            await OnDeleted.InvokeAsync();
            await CloseAsync();
        }
    }

    private async Task OnCancel() => await CloseAsync();
    private async Task OnBackdrop(MouseEventArgs _) => await CloseAsync();

    private async Task CloseAsync()
    {
        IsOpen = false;
        await OnClose.InvokeAsync();
    }
}
