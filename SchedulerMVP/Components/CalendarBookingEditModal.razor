@using SchedulerMVP.Data.Entities
@using Microsoft.EntityFrameworkCore
@inject SchedulerMVP.Data.AppDbContext Db
@inject SchedulerMVP.Services.UserContextService UserContext
@inject SchedulerMVP.Services.UIState UI
@inject SchedulerMVP.Services.IConflictService ConflictService

@if (IsOpen && Booking != null)
{
    <div class="modal-backdrop" style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.5); z-index: 2000;" @onclick="CloseModal"></div>
    
    <div class="bm-modal" @onclick="CloseAreaDropdown">
        <div class="bm-header">
            <h2 class="bm-title">Redigera bokning</h2>
        </div>
        
        @* Group Selection *@
        <div class="bm-field">
            <label class="bm-label">Grupp</label>
            <select @bind="SelectedGroupId" @bind:event="onchange" class="bm-input">
                <option value="">Välj grupp</option>
                @if (Groups != null)
                {
                    @foreach (var group in Groups)
                    {
                        <option value="@group.Id">@group.Name</option>
                    }
                }
            </select>
        </div>
        
        @* Date Selection *@
        <div class="bm-field">
            <label class="bm-label">Datum</label>
            <input type="date" @bind="SelectedDate" class="bm-input" />
        </div>
        
        @* Area Selection *@
        <div class="bm-field">
            <label class="bm-label">Yta</label>
            <div class="bm-custom-select" @onclick:stopPropagation="true">
                <div class="bm-custom-select-trigger" @onclick="ToggleAreaDropdown">
                    @if (SelectedAreaId.HasValue && AvailableAreas != null)
                    {
                        var selectedArea = AvailableAreas.FirstOrDefault(a => a.Id == SelectedAreaId.Value);
                        if (selectedArea != null)
                        {
                            var isAvailable = GetAreaAvailability(selectedArea.Id);
                            <div class="bm-selected-area">
                                <span class="bm-availability-icon @(isAvailable ? "available" : "unavailable")"></span>
                                <span class="bm-area-name">@selectedArea.Name</span>
                                @if (!isAvailable)
                                {
                                    <span class="bm-unavailable-text">(Upptagen)</span>
                                }
                            </div>
                        }
                    }
                    else
                    {
                        <span class="bm-placeholder">Välj yta</span>
                    }
                    <span class="bm-dropdown-icon @(showAreaDropdown ? "open" : "")"></span>
                </div>
                
                @if (showAreaDropdown && AvailableAreas != null)
                {
                    <div class="bm-custom-select-dropdown">
                        @foreach (var area in AvailableAreas)
                        {
                            var isAvailable = GetAreaAvailability(area.Id);
                            var isSelected = SelectedAreaId == area.Id;
                            <div class="bm-dropdown-option @(isSelected ? "selected" : "") @(isAvailable ? "available" : "unavailable")" 
                                 @onclick="() => SelectArea(area.Id)">
                                <span class="bm-availability-icon @(isAvailable ? "available" : "unavailable")"></span>
                                <span class="bm-area-name">@area.Name</span>
                                @if (!isAvailable)
                                {
                                    <span class="bm-unavailable-text">(Upptagen)</span>
                                }
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
        
        @* Time Selection *@
        <div class="bm-field">
            <div class="bm-time-row">
                <div>
                    <label class="bm-label">Starttid</label>
                    <div class="bm-select-wrap">
                        <input type="time" value="@StartTime" @onchange="OnStartTimeChanged" class="bm-input" />
                    </div>
                </div>
                <div>
                    <label class="bm-label">Sluttid</label>
                    <div class="bm-select-wrap">
                        <input type="time" value="@EndTime" @onchange="OnEndTimeChanged" class="bm-input" />
                    </div>
                </div>
            </div>
        </div>
        @* Övrigt (toggle) *@
        <div class="bm-field" style="margin-top:12px;">
            <button type="button" @onclick="ToggleExtras" style="background:transparent;border:none;color:#0b1e34;cursor:pointer;padding:0;font-weight:600;text-align:left;">@(showExtras ? "Dölj alternativ" : "Fler alternativ")</button>
        </div>
        @if (showExtras)
        {
            <div class="bm-field">
                <div style="display:grid;gap:12px;grid-template-columns:1fr;">
                    <div>
                        <label class="bm-label">Notering</label>
                        <textarea class="bm-input" rows="3" @bind="Notes"></textarea>
                    </div>
                    <div style="display:grid;grid-template-columns:1fr 1fr;gap:12px;">
                        <div>
                            <label class="bm-label">Kontaktperson</label>
                            <input class="bm-input" @bind="ContactName" />
                        </div>
                        <div>
                            <label class="bm-label">Telefon</label>
                            <input class="bm-input" @bind="ContactPhone" />
                        </div>
                    </div>
                    <div>
                        <label class="bm-label">E‑post</label>
                        <input class="bm-input" @bind="ContactEmail" />
                    </div>
                </div>
            </div>
        }
        @if (conflictMessages.Count > 0)
        {
            <div class="bm-field" style="margin-top:4px;">
                <div style="padding:10px 12px;border:1px solid #fecaca;background:#fff1f2;color:#7f1d1d;border-radius:10px;font-size:13px;">
                    <div style="font-weight:700;margin-bottom:4px;">Konflikt</div>
                    @foreach (var msg in conflictMessages)
                    {
                        <div>• @msg</div>
                    }
                </div>
            </div>
        }
        
        @* Action Buttons *@
        <div class="bm-actions">
            <button type="button" @onclick="DeleteBooking" class="btn-danger" style="margin-right: auto;">Ta bort</button>
            <button type="button" @onclick="CloseModal" class="btn-outline">Avbryt</button>
            <button type="button" @onclick="SaveBooking" class="btn-primary" disabled="@hasConflicts">Spara</button>
        </div>
    </div>
    
    <style>
        /* ============================================
           BOOKING MODAL - STRUCTURE
           ============================================ */
        .bm-modal{position:fixed;top:50px;left:50%;transform:translateX(-50%);background:#fff;color:#0f1720;padding:28px 28px 0 28px;z-index:4000;border:1px solid #e6e7ea;border-radius:12px;min-width:560px;max-width:720px;width:90vw;box-shadow:0 8px 28px rgba(16,24,40,.18);max-height:80vh;overflow-y:auto}
        .bm-header{position:sticky;top:0;background:#fff;z-index:12;padding-bottom:12px;margin-bottom:12px}
        .bm-title{margin:0 0 12px 0;font-size:20px;font-weight:800;letter-spacing:-.02em}
        
        /* ============================================
           BOOKING MODAL - INPUT STYLING
           All inputs use .bm-input for consistency
           All inputs have same height (40px) except textarea (80px)
           ============================================ */
        .bm-input{width:100%;padding:10px 12px;border-radius:4px;border:1px solid #dcdee2;background-color:#f3f5f7;box-shadow:0 2px 8px 0 rgba(0,0,0,0.02);font-size:12px;font-family:Inter,system-ui,-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,"Noto Sans",sans-serif;box-sizing:border-box;min-height:40px}
        .bm-input[type="time"],.bm-input[type="date"]{padding:10px 12px}
        .bm-input[type="time"]::-webkit-calendar-picker-indicator,.bm-input[type="date"]::-webkit-calendar-picker-indicator{opacity:1;cursor:pointer}
        textarea.bm-input{min-height:80px;padding:10px 12px;resize:vertical}
        select.bm-input{appearance:none;-webkit-appearance:none;-moz-appearance:none;cursor:pointer;padding-right:40px;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' height='20' viewBox='0 0 24 24' width='20'%3E%3Cpath d='M7 10l5 5 5-5z' fill='%23666'/%3E%3C/svg%3E");background-repeat:no-repeat;background-position:right 8px center;background-size:20px 20px}
        
        /* ============================================
           BOOKING MODAL - TIME SELECTION
           ============================================ */
        .bm-time-row{display:grid;grid-template-columns:1fr 1fr;gap:16px}
        .bm-time-row > div{box-sizing:border-box;min-width:0}
        
        /* ============================================
           BOOKING MODAL - CUSTOM SELECTS (Area)
           ============================================ */
        .bm-custom-select{position:relative;width:100%;box-sizing:border-box}
        .bm-custom-select-trigger{display:flex;align-items:center;justify-content:space-between;padding:10px 12px;border:1px solid #dcdee2;border-radius:4px;background-color:#f3f5f7;cursor:pointer;box-shadow:0 2px 8px 0 rgba(0,0,0,0.02);font-size:12px;min-height:40px;box-sizing:border-box;width:100%}
        .bm-custom-select-trigger:hover{border-color:#cbd5e1}
        .bm-selected-area{display:flex;align-items:center;gap:8px;flex:1}
        .bm-placeholder{color:#9ca3af}
        .bm-area-name{flex:1;font-size:12px;font-weight:400;color:#000}
        .bm-availability-icon{width:8px;height:8px;border-radius:50%;flex-shrink:0}
        .bm-availability-icon.available{background-color:#10b981}
        .bm-availability-icon.unavailable{background-color:#ef4444}
        .bm-unavailable-text{color:#9ca3af;font-size:11px}
        .bm-dropdown-icon{display:inline-block;width:20px;height:20px;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' height='20' viewBox='0 0 24 24' width='20'%3E%3Cpath d='M7 10l5 5 5-5z' fill='%23666'/%3E%3C/svg%3E");background-repeat:no-repeat;background-position:center;background-size:20px 20px;flex-shrink:0;transition:transform 0.2s}
        .bm-dropdown-icon.open{transform:rotate(180deg)}
        .bm-custom-select-dropdown{position:absolute;top:100%;left:0;right:0;background:#fff;border:1px solid #E3E8EE;border-radius:8px;box-shadow:0 4px 12px rgba(0,0,0,0.15);z-index:1000;max-height:200px;overflow-y:auto;margin-top:2px}
        .bm-dropdown-option{display:flex;align-items:center;gap:8px;padding:10px 12px;cursor:pointer;border-bottom:1px solid #f3f4f6;font-size:12px}
        .bm-dropdown-option:last-child{border-bottom:none}
        .bm-dropdown-option:hover{background-color:#f8fafc}
        .bm-dropdown-option.selected{background-color:#eff6ff;color:#1d4ed8}
        .bm-dropdown-option.unavailable{color:#9ca3af;cursor:not-allowed}
        .bm-dropdown-option.unavailable:hover{background-color:#fef2f2}
        
        /* ============================================
           BOOKING MODAL - ACTIONS
           ============================================ */
        .bm-actions{display:flex;gap:12px;justify-content:flex-end;margin-top:8px;position:sticky;bottom:0;background:#fff;border-top:1px solid #e6e7ea;padding-top:12px;padding-bottom:28px;z-index:10}
        .btn-outline{padding:10px 16px;border:1px solid #d1d5db;border-radius:10px;background:#fff;color:#0f1720;cursor:pointer}
        .btn-primary{padding:10px 16px;border:none;border-radius:10px;background:#1761a5;color:#fff;cursor:pointer}
        .btn-danger{padding:10px 16px;border:1px solid #dc2626;border-radius:10px;background:#fff;color:#dc2626;cursor:pointer}
        .bm-option-unavailable{color:#9ca3af;background-color:#f9fafb}
    </style>
}

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public CalendarBooking? Booking { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnSave { get; set; }
    
    private DateTime SelectedDate { get; set; }
    private Guid? SelectedGroupId { get; set; }
    private string StartTime { get; set; } = "08:00";
    private string EndTime { get; set; } = "09:00";
    private List<Group>? Groups;
    private int currentDurationMinutes = 60;
    private bool isUpdatingTime = false;
    private bool hasConflicts = false;
    private List<string> conflictMessages = new();
    private string? Notes;
    private string? ContactName;
    private string? ContactPhone;
    private string? ContactEmail;
    private bool showExtras = false;
    
    // Area selection properties
    private Guid? SelectedAreaId { get; set; }
    private List<Area>? AvailableAreas;
    private Dictionary<Guid, bool> AreaAvailability = new();
    private bool showAreaDropdown = false;
    
    protected override async Task OnParametersSetAsync()
    {
        if (IsOpen && Booking != null)
        {
            // Clear previous area availability data to force refresh
            AreaAvailability.Clear();
            
            // Load groups from database
            await LoadGroupsAsync();
            
            // Load available areas for the place
            await LoadAvailableAreasAsync();
            
            // Initialize form with booking data
            SelectedDate = Booking.Date.ToDateTime(TimeOnly.MinValue);
            SelectedGroupId = Booking.GroupId;
            StartTime = FormatTime(Booking.StartMin);
            EndTime = FormatTime(Booking.EndMin);
            currentDurationMinutes = Booking.EndMin - Booking.StartMin;
            Notes = Booking.Notes;
            ContactName = Booking.ContactName;
            ContactPhone = Booking.ContactPhone;
            ContactEmail = Booking.ContactEmail;
            // Auto-expand extras if any extra fields contain data
            showExtras = !string.IsNullOrWhiteSpace(Notes)
                        || !string.IsNullOrWhiteSpace(ContactName)
                        || !string.IsNullOrWhiteSpace(ContactPhone)
                        || !string.IsNullOrWhiteSpace(ContactEmail);
            
            // Set the initially selected area (default to the booking's current area)
            SelectedAreaId = Booking.AreaId;
            
            // Console.WriteLine($"=== CALENDAR BOOKING EDIT MODAL INIT ===");
            // Console.WriteLine($"Booking Date: {Booking.Date}");
            // Console.WriteLine($"Booking Group: {Booking.Group?.Name}");
            // Console.WriteLine($"Start Time: {StartTime}");
            // Console.WriteLine($"End Time: {EndTime}");
            await RecheckConflictsAsync();
        }
    }
    
    private async Task LoadGroupsAsync()
    {
        try
        {
            var userId = UserContext.GetCurrentUserId();
            var isAdmin = await UserContext.IsAdminAsync();
            var query = Db.Groups.AsQueryable();
            if (!isAdmin && !string.IsNullOrEmpty(userId))
            {
                query = query.Where(g => g.UserId == userId || g.UserId == null);
            }
            Groups = await query.OrderBy(g => g.Name).ToListAsync();
        }
        catch (Exception ex)
        {
            // Console.WriteLine($"Error loading groups: {ex.Message}");
        }
    }
    
    private async Task LoadAvailableAreasAsync()
    {
        if (Booking?.Area?.Place == null) return;
        
        try
        {
            // Load all areas for the current place, ordered by path for hierarchical display
            AvailableAreas = await Db.Areas
                .Where(a => a.PlaceId == Booking.Area.Place.Id)
                .OrderBy(a => a.Path)
                .ToListAsync();
            
            // Check availability for all areas
            await CheckAllAreasAvailabilityAsync();
        }
        catch (Exception ex)
        {
            // Console.WriteLine($"Error loading areas: {ex.Message}");
        }
    }
    
    private async Task CheckAllAreasAvailabilityAsync()
    {
        if (AvailableAreas == null) return;
        
        AreaAvailability.Clear();
        
        // Parse current time selection
        var sp = StartTime.Split(':'); 
        var ep = EndTime.Split(':');
        var s = int.Parse(sp[0]) * 60 + int.Parse(sp[1]);
        var e = int.Parse(ep[0]) * 60 + int.Parse(ep[1]);
        
        foreach (var area in AvailableAreas)
        {
            // Check calendar conflicts for the selected date, excluding current booking
            var conflicts = await ConflictService.CheckCalendarConflictsAsync(area.Id, DateOnly.FromDateTime(SelectedDate), s, e, Booking?.Id);
            AreaAvailability[area.Id] = conflicts.Count == 0;
        }
    }
    
    private bool GetAreaAvailability(Guid areaId)
    {
        return AreaAvailability.TryGetValue(areaId, out bool isAvailable) ? isAvailable : true;
    }
    
    private void ToggleAreaDropdown()
    {
        showAreaDropdown = !showAreaDropdown;
        StateHasChanged();
    }
    
    private void CloseAreaDropdown()
    {
        showAreaDropdown = false;
        StateHasChanged();
    }
    
    private async Task SelectArea(Guid areaId)
    {
        SelectedAreaId = areaId;
        showAreaDropdown = false;
        await RecheckConflictsAsync();
        StateHasChanged();
    }
    
    private async Task OnStartTimeChanged(ChangeEventArgs e)
    {
        if (isUpdatingTime) return;
        
        StartTime = e.Value?.ToString() ?? "08:00";
        isUpdatingTime = true;
        EndTime = AddMinutesToTime(StartTime, currentDurationMinutes);
        isUpdatingTime = false;
        await RecheckConflictsAsync();
        await CheckAllAreasAvailabilityAsync();
        StateHasChanged();
    }
    
    private async Task OnEndTimeChanged(ChangeEventArgs e)
    {
        if (isUpdatingTime) return;
        
        EndTime = e.Value?.ToString() ?? "09:00";
        var startParts = StartTime.Split(':');
        var endParts = EndTime.Split(':');
        var startMin = int.Parse(startParts[0]) * 60 + int.Parse(startParts[1]);
        var endMin = int.Parse(endParts[0]) * 60 + int.Parse(endParts[1]);
        currentDurationMinutes = endMin - startMin;
        await RecheckConflictsAsync();
        await CheckAllAreasAvailabilityAsync();
        StateHasChanged();
    }
    
    private async Task SaveBooking()
    {
        if (Booking == null) return;
        if (hasConflicts) return;
        
        // Console.WriteLine("=== SAVE CALENDAR BOOKING START ===");
        // Console.WriteLine($"SelectedDate: {SelectedDate:yyyy-MM-dd}");
        // Console.WriteLine($"SelectedGroupId: {SelectedGroupId}");
        // Console.WriteLine($"StartTime: {StartTime}");
        // Console.WriteLine($"EndTime: {EndTime}");
        
        if (!SelectedGroupId.HasValue)
        {
            // Console.WriteLine("ERROR: No group selected");
            return;
        }
        
        try
        {
            var startParts = StartTime.Split(':');
            var endParts = EndTime.Split(':');
            var startMin = int.Parse(startParts[0]) * 60 + int.Parse(startParts[1]);
            var endMin = int.Parse(endParts[0]) * 60 + int.Parse(endParts[1]);
            
            // Get the selected area
            var targetAreaId = SelectedAreaId ?? Booking.AreaId;
            
            // Update the booking
            Booking.Date = DateOnly.FromDateTime(SelectedDate);
            Booking.AreaId = targetAreaId;
            Booking.GroupId = SelectedGroupId.Value;
            Booking.StartMin = startMin;
            Booking.EndMin = endMin;
            Booking.Notes = string.IsNullOrWhiteSpace(Notes) ? null : Notes;
            Booking.ContactName = ContactName;
            Booking.ContactPhone = ContactPhone;
            Booking.ContactEmail = ContactEmail;
            Booking.UpdatedAt = DateTime.UtcNow;
            
            // Mark the entity as modified to ensure EF tracks the changes
            Db.Entry(Booking).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
            
            var result = await Db.SaveChangesAsync();
            // Console.WriteLine($"Database save result: {result} rows affected");
            
            // Navigate to the selected area if different from current
            if (targetAreaId != Booking.AreaId)
            {
                // Update the UI state to navigate to the selected area
                UI.SelectedAreaId = targetAreaId;
            }
            
            await OnSave.InvokeAsync();
            // Console.WriteLine("=== SAVE CALENDAR BOOKING SUCCESS ===");
        }
        catch (Exception ex)
        {
            // Console.WriteLine("=== SAVE CALENDAR BOOKING ERROR ===");
            // Console.WriteLine($"Error: {ex.Message}");
        }
    }
    
    private async Task DeleteBooking()
    {
        if (Booking == null) return;
        
        // Console.WriteLine("=== DELETE CALENDAR BOOKING START ===");
        
        try
        {
            Db.CalendarBookings.Remove(Booking);
            var result = await Db.SaveChangesAsync();
            // Console.WriteLine($"Database delete result: {result} rows affected");
            
            await OnSave.InvokeAsync();
            // Console.WriteLine("=== DELETE CALENDAR BOOKING SUCCESS ===");
        }
        catch (Exception ex)
        {
            // Console.WriteLine("=== DELETE CALENDAR BOOKING ERROR ===");
            // Console.WriteLine($"Error: {ex.Message}");
        }
    }
    
    private void CloseModal()
    {
        showAreaDropdown = false; // Close area dropdown when modal closes
        OnClose.InvokeAsync();
    }
    
    private static string FormatTime(int minutes)
    {
        var h = minutes / 60;
        var m = minutes % 60;
        return $"{h:00}:{m:00}";
    }
    
    private static string AddMinutesToTime(string time, int minutes)
    {
        var parts = time.Split(':');
        var totalMinutes = int.Parse(parts[0]) * 60 + int.Parse(parts[1]) + minutes;
        var hours = totalMinutes / 60;
        var mins = totalMinutes % 60;
        return $"{hours:00}:{mins:00}";
    }
    
    private static List<string> GetTimeOptions()
    {
        var options = new List<string>();
        for (int hour = 0; hour < 24; hour++)
        {
            for (int minute = 0; minute < 60; minute += 15)
            {
                options.Add($"{hour:00}:{minute:00}");
            }
        }
        return options;
    }
}

@code {
    private async Task RecheckConflictsAsync()
    {
        conflictMessages.Clear(); hasConflicts = false;
        if (Booking?.AreaId == null) { StateHasChanged(); return; }
        // parse times
        var sp = StartTime.Split(':'); var ep = EndTime.Split(':');
        var s = int.Parse(sp[0]) * 60 + int.Parse(sp[1]);
        var e = int.Parse(ep[0]) * 60 + int.Parse(ep[1]);
        var conflicts = await ConflictService.CheckCalendarConflictsAsync(Booking.AreaId, DateOnly.FromDateTime(SelectedDate), s, e, Booking.Id);
        if (conflicts.Count > 0)
        {
            hasConflicts = true;
            foreach (var c in conflicts)
            {
                var from = $"{c.StartMin/60:00}:{c.StartMin%60:00}"; var to = $"{c.EndMin/60:00}:{c.EndMin%60:00}";
                conflictMessages.Add($"{GetDayName(c.DayOfWeek)} • {from}-{to} • {c.OtherAreaName} ({c.OtherGroupName})");
            }
        }
        StateHasChanged();
    }

    private void ToggleExtras() => showExtras = !showExtras;

    private static string GetDayName(int day)
    {
        return day switch
        {
            1 => "Måndag",
            2 => "Tisdag",
            3 => "Onsdag",
            4 => "Torsdag",
            5 => "Fredag",
            6 => "Lördag",
            7 => "Söndag",
            _ => "Okänd"
        };
    }
}
