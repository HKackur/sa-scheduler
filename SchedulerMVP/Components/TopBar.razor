@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using SchedulerMVP.Data.Entities
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.Components
@inject SchedulerMVP.Services.IScheduleTemplateService TemplateService
@inject SchedulerMVP.Services.UIState UI
@inject SchedulerMVP.Services.ICalendarBookingService CalendarBookingService
@inject SchedulerMVP.Services.IPlaceService PlaceService
@inject SchedulerMVP.Data.AppDbContext Db
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthStateProvider
@implements IDisposable

@{
    var uri = Navigation.Uri.ToLower();
    var path = new Uri(uri).AbsolutePath.ToLower();
    var isLoginPage = path == "/login" || path.EndsWith("/login");
    var isAdminPage = UI.IsAdminPage || path == "/admin" || path.EndsWith("/admin") || path.Contains("/admin/");
    var isGroupsManagePage = path == "/grupper" || path.EndsWith("/grupper");
}

@if (!isLoginPage)
{
    <div class="sa-topbar">
    <div class="sa-topbar-row">
        @* Left column: 80% width - matches .sa-center-new *@
        <div class="tb-topbar-left">
            @if (isAdminPage || isGroupsManagePage)
            {
                <div class="sa-header-content">
                    <button class="btn-nav" @onclick="NavigateBack" title="Tillbaka">
                        <span class="material-symbols-outlined">chevron_left</span>
                        Tillbaka
                    </button>
                    <h2 class="sa-page-title">@(isAdminPage ? "Admin" : "Hantera grupper")</h2>
                </div>
            }
            else
            {
                <div class="sa-header-content">
                    <h2 class="sa-page-title">@UI.PageTitle</h2>
                    @if (UI.SelectedAreaId.HasValue && SelectedArea != null)
                    {
                        <div class="sa-breadcrumb">
                            <span class="sa-breadcrumb-item">@SelectedArea.Place?.Name</span>
                            <span class="sa-breadcrumb-separator">/</span>
                            <span class="sa-breadcrumb-item sa-breadcrumb-current">@SelectedArea.Name</span>
                        </div>
                    }
                </div>
                
                @* Calendar actions container *@
                @if (UI.IsCalendarViewMode)
                {
                    <div class="calendar-actions">
                    <!-- Navigation group -->
                    <div class="nav-group">
                            <button class="btn btn-today" @onclick="GoToToday" title="Gå till idag">Idag</button>
                            
                            @if (UI.IsDayView)
                            {
                                <button class="btn btn-nav" @onclick="NavigateToPreviousDay" title="Föregående dag">
                                    <span class="material-symbols-outlined">chevron_left</span>
                                </button>
                                <button class="btn btn-nav" @onclick="NavigateToNextDay" title="Nästa dag">
                                    <span class="material-symbols-outlined">chevron_right</span>
                                </button>
                                <div class="nav-text">@GetFormattedDayText()</div>
                            }
                            else
                            {
                                <button class="btn btn-nav" @onclick="NavigateToPreviousWeek" title="Föregående vecka">
                                    <span class="material-symbols-outlined">chevron_left</span>
                                </button>
                                <button class="btn btn-nav" @onclick="NavigateToNextWeek" title="Nästa vecka">
                                    <span class="material-symbols-outlined">chevron_right</span>
                                </button>
                                <div class="nav-text">Vecka @GetWeekNumber()</div>
                            }
                        </div>
                        
                        <!-- View controls and more options group -->
                        <div class="view-controls-group">
                            <!-- Week/Day select container -->
                            <div class="select-group">
                                <select class="tb-select" @onchange="OnViewModeChanged">
                                    <option value="false" selected="@(!UI.IsDayView)">Vecka</option>
                                    <option value="true" selected="@(UI.IsDayView)">Dag</option>
                                </select>
                            </div>
                            
                            <!-- More options container -->
                            <div class="more-group">
                                <div style="position: relative;">
                                    <button class="tb-btn" @onclick="ToggleMoreMenu" title="Fler alternativ">
                                        Fler alternativ <span class="material-symbols-outlined" style="font-size: 18px; margin-left: 4px;">more_vert</span>
                                    </button>
                                    @if (moreMenuOpen)
                                    {
                                        <div class="menu-overlay" @onclick="CloseMoreMenu"></div>
                                        <div class="tb-menu" style="right: 0; left: auto;">
                                            <button class="tb-item" @onclick="OpenCopyTemplateModal">Lägg till från mall</button>
                                            <div style="border-top: 1px solid #e4e4e4; margin: 8px 0;"></div>
                                            <button class="tb-item" @onclick="OpenClearWeekConfirm">Rensa vecka</button>
                                            <button class="tb-item" @onclick="CopyWeekToClipboard">Kopiera vecka till urklipp</button>
                                            <button class="tb-item" @onclick="PasteWeekFromClipboard" disabled="@(!CanPasteWeek())">Klistra in vecka</button>
                                            <div style="border-top: 1px solid #e4e4e4; margin: 8px 0;"></div>
                                            <button class="tb-item" disabled>Publicera till närvarokorten</button>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <!-- Template selector and actions for week planning view -->
                    <div class="calendar-actions">
                        <div style="display:flex;align-items:center;gap:8px;flex-wrap:nowrap;white-space:nowrap;">
                            <select class="tb-select" @onchange="OnTemplateChanged">
                                @foreach (var t in templates)
                                {
                                    <option value="@t.Id" selected="@(UI.SelectedTemplateId == t.Id)">@t.Name</option>
                                }
                            </select>
                            <button class="tb-action-btn" @onclick="OpenEdit" title="Ändra mallen">
                                <span class="action-text">Ändra mallen</span>
                                <span class="material-symbols-outlined">edit</span>
                            </button>
                            <div style="position: relative;">
                                <button class="tb-action-btn" @onclick="ToggleMenu" title="Mallåtgärder">
                                    <span class="action-text">Ny mall</span>
                                    <span class="material-symbols-outlined">add</span>
                                </button>
                                @if (menuOpen)
                                {
                                    <div class="menu-overlay" @onclick="CloseMenu"></div>
                                    <div class="tb-menu">
                                        <button class="tb-item" @onclick="OpenCreate">Ny mall</button>
                                        <button class="tb-item" @onclick="OpenCopy">Skapa kopia</button>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
        
        @* Right column: 20% width - matches .sa-right-new - Only view toggle *@
        <div class="tb-topbar-right">
            @if (!isAdminPage && !isGroupsManagePage)
            {
                @* View toggle tabs *@
                <div class="view-toggle">
                    <button class="view-toggle-btn @(UI.IsCalendarViewMode ? "" : "active")" @onclick="SwitchToWeekPlanner">Veckoschema</button>
                    <button class="view-toggle-btn @(UI.IsCalendarViewMode ? "active" : "")" @onclick="SwitchToCalendar">Kalender</button>
                </div>
            }

            @* User menu *@
            <div style="position: relative; margin-left: 12px;">
                <button class="btn-nav" @onclick="ToggleUserMenu" title="Meny" aria-label="Meny">
                    <svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                        <rect x="3" y="6" width="18" height="2" rx="1" fill="#000"/>
                        <rect x="3" y="11" width="18" height="2" rx="1" fill="#000"/>
                        <rect x="3" y="16" width="18" height="2" rx="1" fill="#000"/>
                    </svg>
                </button>
                @if (userMenuOpen)
                {
                    <div class="menu-overlay" @onclick="CloseUserMenu"></div>
                    <div class="tb-menu" style="right:0; left:auto; min-width:200px;">
                        @if (isCurrentUserAdmin)
                        {
                            <a href="/admin" class="tb-item" style="text-decoration:none;" @onclick="NavigateToAdminLink">Admin</a>
                            <div style="border-top: 1px solid #e4e4e4; margin: 8px 0;"></div>
                        }
                        <a href="/grupper" class="tb-item" style="text-decoration:none; width:fit-content;" @onclick="NavigateToGroupsLink">Hantera grupper</a>
                        <div style="border-top: 1px solid #e4e4e4; margin: 8px 0;"></div>
                        <button class="tb-item danger" @onclick="PerformLogout" style="width:fit-content;">Logga ut</button>
                        <div style="border-top: 1px solid #e4e4e4; margin: 8px 0;"></div>
                        <div class="tb-item" style="cursor: default; color:#6b7280; text-align:right; white-space: normal; overflow-wrap: anywhere; word-break: break-all; display:block; width:fit-content;">@currentUserEmail</div>
                    </div>
                }
            </div>
        </div>
    </div>
    

    <style>
        .sa-header-content {
            display: flex;
            align-items: center;
            gap: 16px;
            flex: 0 0 auto;
            margin-right: auto;
            max-width: fit-content;
        }

        .sa-page-title {
            margin: 0;
            font-size: 24px;
            font-weight: 600;
            color: #333;
            white-space: nowrap;
            flex-shrink: 0;
        }

        .sa-breadcrumb {
            display: flex;
            align-items: center;
            gap: 6px;
            font-size: 14px;
            color: #6b7280;
            white-space: nowrap;
            flex-shrink: 0;
        }

        .sa-breadcrumb-item {
            font-weight: 500;
        }

        .sa-breadcrumb-current {
            color: #374151;
            font-weight: 600;
        }

        .sa-breadcrumb-separator {
            color: #9ca3af;
            font-weight: 400;
        }
        
        .view-toggle{display:flex;background:#f1f5f9;border-radius:8px;padding:2px}
        .view-toggle-btn{border:none;background:transparent;padding:8px 16px;border-radius:6px;font-size:13px;font-weight:500;color:#64748b;cursor:pointer;transition:all 0.2s;height:34px;box-sizing:border-box;display:flex;align-items:center}
        .view-toggle-btn:hover{color:#334155}
        .view-toggle-btn.active{background:#fff;color:#0f172a;box-shadow:0 1px 2px rgba(0,0,0,0.05)}
        
        .select-group {
            display: flex;
            align-items: center;
            min-width: 120px; /* Ensure select has minimum width to display content */
            flex-shrink: 0;
        }
        
        /* Top bar selects - reduce padding to match button height */
        .sa-topbar .tb-select {
            padding: 7px 12px; /* Reduced from 10px to 7px top/bottom for 34px height */
        }
        
        /* Week template selector: fixed width with truncation and spacing before arrow */
        .calendar-actions > div > select.tb-select {
            width: 220px;            /* standard fixed width */
            min-width: 220px;
            max-width: 280px;
            padding-right: 36px;    /* leave gap before the arrow icon */
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis; /* truncate long template titles */
            flex: 0 0 auto;          /* prevent shrinking in flex row */
        }
        
        
        /* Calendar actions container - FIXED layout */
        .calendar-actions {
            display: flex;
            justify-content: flex-end;
            align-items: center;
            gap: 16px;
            flex-wrap: nowrap;
            flex-shrink: 1 !important;
            min-width: 0 !important;
        }
        
        /* Inner container for buttons/select */
        .calendar-actions > div {
            display: flex !important;
            align-items: center;
            gap: 8px;
            flex-wrap: nowrap !important;
            white-space: nowrap !important;
            flex-shrink: 1 !important;
            min-width: 0 !important;
        }
        
        .sa-topbar-row {
            display: flex;
            align-items: center;
            gap: 0;
            flex-wrap: nowrap;
            min-width: 0;
        }
        
        /* Top bar columns matching main layout */
        .tb-topbar-left {
            flex: 0 0 80%;
            display: flex;
            align-items: center;
            gap: 16px;
            min-width: 0;
            padding-right: 16px;
        }
        
        .tb-topbar-right {
            flex: 0 0 20%;
            display: flex;
            align-items: center;
            justify-content: flex-end;
            min-width: 0;
            padding-right: 24px; /* Match left padding from .sa-topbar */
        }
        
        .view-controls-group {
            display: flex;
            align-items: center;
            gap: 16px;
            flex-shrink: 0; /* Prevent shrinking */
        }
        
        /* Navigation group - left aligned */
        .nav-group {
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        /* Toggle group - centered */
        .toggle-group {
            display: flex;
            align-items: center;
        }
        
        /* More options group - right aligned */
        .more-group {
            display: flex;
            align-items: center;
        }
        
        .nav-text {
            font-weight: 500;
            color: #333;
            margin: 0 8px;
            min-width: 200px; /* Ensure enough space for date text */
            white-space: nowrap; /* Prevent line breaks */
            text-align: left; /* Left-align the date text */
        }
        
        .today-highlight {
            background: #1761A5;
            color: #FFF;
            padding: 6px 12px;
            border-radius: 6px;
            font-weight: 600;
        }
        
        .btn {
            display: inline-flex;
            padding: 8px 12px;
            align-items: center;
            gap: 12px;
            border: none;
            border-radius: 6px;
            background: #eeeeee;
            color: var(--Base-Black, #000);
            text-align: center;
            font-feature-settings: 'liga' off, 'clig' off;
            font-family: Inter;
            font-size: 12px;
            font-style: normal;
            font-weight: 500;
            line-height: 16px;
            cursor: pointer;
            transition: all 0.2s;
            height: 34px;
            box-sizing: border-box;
        }
        
        .btn:hover {
            background: #e4e4e4;
        }
        
        .btn:focus {
            background: #eeeeee;
            border: 1px solid #cfcfcf;
            outline: none;
        }
        
        
        .btn-outline-secondary {
            background: transparent;
            border-color: #d1d5db;
            color: #6b7280;
        }
        
        .btn-outline-secondary:hover {
            background: #f9fafb;
            border-color: #9ca3af;
            color: #374151;
        }
        
        .btn-today {
            display: inline-flex;
            padding: 8px 16px;
            align-items: center;
            gap: 12px;
            border: none;
            border-radius: 6px;
            background: #eeeeee;
            color: var(--Base-Black, #000);
            text-align: center;
            font-feature-settings: 'liga' off, 'clig' off;
            font-family: Inter;
            font-size: 12px;
            font-style: normal;
            font-weight: 500;
            line-height: 16px;
            cursor: pointer;
            transition: all 0.2s;
            height: 34px;
            box-sizing: border-box;
        }
        
        .btn-today:hover {
            background: #e4e4e4;
        }
        
        .btn-today:focus {
            background: #eeeeee;
            border: 1px solid #cfcfcf;
            outline: none;
        }
        
        
        .btn-nav {
            display: inline-flex;
            padding: 8px 8px;
            align-items: center;
            gap: 12px;
            border: none;
            border-radius: 6px;
            background: #eeeeee;
            color: var(--Base-Black, #000);
            text-align: center;
            font-feature-settings: 'liga' off, 'clig' off;
            font-family: Inter;
            font-size: 12px;
            font-style: normal;
            font-weight: 500;
            line-height: 16px;
            cursor: pointer;
            transition: all 0.2s;
            justify-content: center;
            min-width: 32px;
            height: 34px;
            box-sizing: border-box;
        }
        
        .btn-nav:hover {
            background: #e4e4e4;
        }
        
        .btn-nav:focus {
            background: #eeeeee;
            border: 1px solid #cfcfcf;
            outline: none;
        }
        
        
        .btn-nav .material-symbols-outlined {
            font-size: 18px;
        }
        
        /* Template selector and actions styling */
        .sa-topbar-actions {
            display: flex;
            gap: 8px;
            align-items: center;
            position: relative;
        }
        
        
        /* Input container structure */
        .input-container {
            display: flex;
            width: 200px;
            flex-direction: column;
            align-items: flex-start;
            gap: 4px;
            flex-shrink: 0;
        }
        
        /* Input label */
        .input-label {
            color: var(--Base-Black, #000);
            font-feature-settings: 'liga' off, 'clig' off;
            font-family: Inter;
            font-size: 11px;
            font-style: normal;
            font-weight: 400;
            line-height: 16px; /* 145.455% */
        }
        
        /* Action button design */
        .tb-action-btn {
            display: inline-flex;
            padding: 6px 12px;
            align-items: center;
            gap: 8px;
            border-radius: 4px;
            background: var(--gray-primary-gray-300, #EEE);
            border: none;
            cursor: pointer;
            transition: all 0.2s;
            white-space: nowrap !important;
            flex-shrink: 0 !important;
            min-width: max-content;
            width: auto;
            height: 34px;
            box-sizing: border-box;
        }
        
        .tb-action-btn:hover {
            background: #ddd;
        }
        
        .action-text {
            color: var(--Base-Black, #000);
            text-align: center;
            font-feature-settings: 'liga' off, 'clig' off;
            font-family: Inter;
            font-size: 12px;
            font-style: normal;
            font-weight: 500;
            line-height: 16px; /* 133.333% */
            white-space: nowrap;
        }
        
        .tb-action-btn .material-symbols-outlined {
            font-size: 18px;
            color: var(--Base-Black, #000);
        }
        
        .tb-menu {
            position: absolute;
            top: calc(100% + 10px);
            right: 0;             /* anchor to the right edge so it opens leftwards */
            left: auto;
            background: white;
            border: 1px solid #e4e4e4;
            border-radius: 8px;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            z-index: 1000;
            width: max-content;   /* grow to fit content */
            max-width: 280px;     /* but never wider than 280px */
            min-width: fit-content; /* avoid breaking too early */
            padding: 8px;
            display: flex;
            flex-direction: column;
            box-sizing: border-box;
            overflow-x: hidden;   /* never overflow horizontally */
        }
        
        .tb-item {
            display: block;
            width: fit-content;
            padding: 8px 16px;
            border: none;
            background: transparent;
            text-align: right;
            font-size: 13px;
            color: #374151;
            cursor: pointer;
            transition: background-color 0.2s;
            white-space: normal;   /* allow wrapping */
            overflow-wrap: anywhere;
            word-break: break-word;
        }
        
        .tb-item:hover {
            background: #f3f4f6;
        }
        .tb-item:disabled {
            color: #9ca3af;
            cursor: not-allowed;
            background: transparent;
            opacity: 0.7;
        }
        
        .tb-item.danger {
            color: #dc2626;
        }
        
        .tb-item.danger:hover {
            background: #fef2f2;
        }
        
        .menu-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            z-index: 999;
            background: transparent;
        }
        
        .tb-btn {
            display: inline-flex;
            padding: 8px 12px;
            align-items: center;
            gap: 8px;
            border: none;
            border-radius: 6px;
            background: #1761A5;
            color: #FFF;
            text-align: center;
            white-space: nowrap; /* Prevent line breaks */
            flex-shrink: 0; /* Prevent shrinking */
            font-feature-settings: 'liga' off, 'clig' off;
            font-family: Inter;
            font-size: 12px;
            font-style: normal;
            font-weight: 500;
            line-height: 16px;
            cursor: pointer;
            transition: all 0.2s;
            height: 34px;
            box-sizing: border-box;
        }
        
        .tb-btn:hover {
            background: #0f4a7a;
        }
        
        .tb-btn:focus {
            background: #1761A5;
            border: none;
            outline: none;
        }
    </style>
</div>
}
@* End @if (!isLoginPage) - TopBar only shows when NOT on login page *@

<ScheduleTemplateEditModal IsOpen="@editOpen" OnClose="CloseEdit" OnSaved="AfterTemplateSaved" />
<ScheduleTemplateCreateModal IsOpen="@createOpen" OnClose="CloseCreate" OnCreated="AfterTemplateSaved" />
<ScheduleTemplateCopyModal IsOpen="@copyOpen" OnClose="CloseCopy" OnCopied="AfterTemplateSaved" />
<ScheduleTemplateDeleteModal IsOpen="@deleteOpen" OnClose="CloseDelete" OnDeleted="AfterTemplateSaved" />
<Onboarding />

@code {
    private List<SchedulerMVP.Data.Entities.ScheduleTemplate> templates = new();
    private bool menuOpen;
    private bool editOpen;
    private bool createOpen;
    private bool copyOpen;
    private bool deleteOpen;
    private Guid? lastPlaceId;
    
    // Calendar navigation fields
    private bool moreMenuOpen;
    private bool clearWeekConfirmOpen;
    private string clearWeekConfirmText = "";
    private bool userMenuOpen;
    private string? currentUserEmail;
    private bool isCurrentUserAdmin;
    
    // SelectedArea property for breadcrumb
    private Area? SelectedArea => UI.SelectedAreaId.HasValue 
        ? Db.Areas.Include(a => a.Place).FirstOrDefault(a => a.Id == UI.SelectedAreaId.Value) 
        : null;
    
    protected override void OnInitialized()
    {
        Navigation.LocationChanged += OnLocationChanged;
        UI.OnChanged += StateHasChanged;
        try
        {
            var user = HttpContextAccessor?.HttpContext?.User;
            currentUserEmail = user?.FindFirstValue(ClaimTypes.Email) ?? user?.Identity?.Name;
            isCurrentUserAdmin = user?.IsInRole("Admin") == true;
        }
        catch { }
    }
    
    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
        UI.OnChanged -= StateHasChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        try
        {
            var path = new Uri(e.Location).AbsolutePath.ToLower();
            var isGroups = path == "/grupper" || path.EndsWith("/grupper");
            var isAdmin = path == "/admin" || path.EndsWith("/admin") || path.Contains("/admin/");
            if (isGroups)
            {
                UI.PageTitle = "Hantera grupper";
                UI.IsAdminPage = false;
            }
            else if (isAdmin)
            {
                UI.PageTitle = "Admin";
                UI.IsAdminPage = true;
            }
            else
            {
                // Default scheduler pages
                UI.IsAdminPage = false;
                UI.PageTitle = UI.IsCalendarViewMode ? "Kalender" : "Veckoschema";
            }
        }
        catch { }
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        UI.OnChanged += async () => await ReloadTemplatesForPlace();
        await ReloadTemplatesForPlace();

        // Resolve email from Identity if not present as a claim
        try
        {
            if (string.IsNullOrEmpty(currentUserEmail))
            {
                // First try via Cascading AuthenticationState
                var state = await AuthStateProvider.GetAuthenticationStateAsync();
                var principal = state?.User;
                var userId = principal?.FindFirstValue(ClaimTypes.NameIdentifier);
                if (!string.IsNullOrEmpty(userId))
                {
                    var appUser = await UserManager.FindByIdAsync(userId);
                    currentUserEmail = appUser?.Email;
                    isCurrentUserAdmin = await UserManager.IsInRoleAsync(appUser!, "Admin");
                }
                else
                {
                    // Fallback to HttpContext if available
                    var ctxUser = HttpContextAccessor?.HttpContext?.User;
                    userId = ctxUser?.FindFirstValue(ClaimTypes.NameIdentifier);
                    if (!string.IsNullOrEmpty(userId))
                    {
                        var appUser2 = await UserManager.FindByIdAsync(userId);
                        currentUserEmail = appUser2?.Email;
                        isCurrentUserAdmin = await UserManager.IsInRoleAsync(appUser2!, "Admin");
                    }
                }
            }
        }
        catch { }
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        await ReloadTemplatesForPlace();
    }


    private async Task ReloadTemplatesForPlace(bool force = false)
    {
        // Load templates globally (independent of current place)
        if (force || templates.Count == 0)
        {
            templates = await TemplateService.GetTemplatesAsync();
            if (UI.SelectedTemplateId is Guid tid)
            {
                if (!templates.Any(t => t.Id == tid))
                {
                    UI.SelectedTemplateId = templates.FirstOrDefault()?.Id;
                }
            }
            else
            {
                UI.SelectedTemplateId = templates.FirstOrDefault()?.Id;
            }
            StateHasChanged();
        }
    }

    private Task OnTemplateChanged(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out var id))
        {
            UI.SelectedTemplateId = id;
            UI.RaiseChanged();
        }
        return Task.CompletedTask;
    }

    private void ToggleMenu() => menuOpen = !menuOpen;
    
    private void SwitchToWeekPlanner()
    {
        UI.IsCalendarViewMode = false;
        UI.PageTitle = "Veckoschema";
        // Ensure week view shows the Monday of the current week
        var today = DateOnly.FromDateTime(DateTime.Today);
        var monday = today.AddDays(-(int)today.DayOfWeek + (int)DayOfWeek.Monday);
        UI.CurrentWeekStart = monday;
        UI.IsDayView = false;
        menuOpen = false;
    }
    
    private void SwitchToCalendar()
    {
        UI.IsCalendarViewMode = true;
        UI.PageTitle = "Kalender";
        // Default to week view (current week's Monday) when switching to calendar
        var today = DateOnly.FromDateTime(DateTime.Today);
        var monday = today.AddDays(-(int)today.DayOfWeek + (int)DayOfWeek.Monday);
        UI.CurrentWeekStart = monday;
        UI.IsDayView = false;
        menuOpen = false;
        UI.RaiseChanged();
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/");
    }

    private void NavigateToAdminLink()
    {
        userMenuOpen = false;
        Navigation.NavigateTo("/admin");
    }

    private void NavigateToGroupsLink()
    {
        userMenuOpen = false;
        Navigation.NavigateTo("/grupper");
    }

    private void OpenEdit() { menuOpen = false; editOpen = true; }
    private void OpenCreate() { menuOpen = false; createOpen = true; }
    private void OpenCopy() { menuOpen = false; copyOpen = true; }
    private void OpenDelete() { menuOpen = false; deleteOpen = true; }
    private void Save() { menuOpen = false; }

    private Task CloseEdit() { editOpen = false; return Task.CompletedTask; }
    private Task CloseCreate() { createOpen = false; return Task.CompletedTask; }
    private Task CloseCopy() { copyOpen = false; return Task.CompletedTask; }
    private Task CloseDelete() { deleteOpen = false; return Task.CompletedTask; }

    private async Task AfterTemplateSaved()
    {
        await ReloadTemplatesForPlace(true);
        StateHasChanged();
        UI.RaiseChanged();
    }

    private async Task ClearAllCalendarBookings()
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Är du säker på att du vill ta bort alla kalenderbokningar? Detta kan inte ångras.");
        if (confirmed)
        {
            await CalendarBookingService.ClearAllCalendarBookingsAsync();
            UI.RaiseChanged(); // Trigger refresh of the calendar view
        }
    }

    private async Task FixAreaLeafRelations()
    {
        if (await JS.InvokeAsync<bool>("confirm", "Fixa AreaLeaf relationer för alla platser? Detta kan ta en stund."))
        {
            var places = await PlaceService.GetPlacesAsync();
            foreach (var place in places)
            {
                await PlaceService.FixMissingAreaLeafRelationsAsync(place.Id);
            }
            await JS.InvokeAsync<string>("alert", "AreaLeaf relationer har fixats för alla platser!");
            UI.RaiseChanged();
        }
    }

    // Calendar navigation methods
    private void NavigateToPreviousWeek()
    {
        UI.CurrentWeekStart = UI.CurrentWeekStart.AddDays(-7);
        UI.RaiseChanged();
    }

    private void NavigateToNextWeek()
    {
        UI.CurrentWeekStart = UI.CurrentWeekStart.AddDays(7);
        UI.RaiseChanged();
    }

    private void NavigateToPreviousDay()
    {
        UI.CurrentWeekStart = UI.CurrentWeekStart.AddDays(-1);
        UI.RaiseChanged();
    }

    private void NavigateToNextDay()
    {
        UI.CurrentWeekStart = UI.CurrentWeekStart.AddDays(1);
        UI.RaiseChanged();
    }

    private string GetWeekNumber()
    {
        var culture = new System.Globalization.CultureInfo("sv-SE");
        var calendar = culture.Calendar;
        var weekNumber = calendar.GetWeekOfYear(UI.CurrentWeekStart.ToDateTime(TimeOnly.MinValue), System.Globalization.CalendarWeekRule.FirstDay, DayOfWeek.Monday);
        return weekNumber.ToString();
    }

    private string GetDayText()
    {
        return UI.CurrentWeekStart.ToString("dddd d MMMM yyyy", new System.Globalization.CultureInfo("sv-SE"));
    }
    
    private string GetFormattedDayText()
    {
        return UI.CurrentWeekStart.ToString("dddd, d MMMM yyyy", new System.Globalization.CultureInfo("sv-SE"));
    }

    private void ToggleMoreMenu() => moreMenuOpen = !moreMenuOpen;
    
    private void CloseMoreMenu() => moreMenuOpen = false;
    private void ToggleUserMenu() => userMenuOpen = !userMenuOpen;
    private void CloseUserMenu() => userMenuOpen = false;
    private void PerformLogout()
    {
        userMenuOpen = false;
        // Force full page load to hit the server endpoint
        Navigation.NavigateTo("/auth/logout", forceLoad: true);
    }
    
    private void CloseMenu() => menuOpen = false;
    
    private void OpenBookingModal()
    {
        moreMenuOpen = false;
        UI.ShouldOpenBookingModal = true;
        UI.RaiseChanged();
    }
    
    private void OpenClearWeekConfirm()
    {
        moreMenuOpen = false;
        clearWeekConfirmOpen = true;
        clearWeekConfirmText = "Är du säker på att du vill rensa alla bokningar för denna vecka?";
    }
    
    private void CloseClearWeekConfirm()
    {
        clearWeekConfirmOpen = false;
        clearWeekConfirmText = "";
    }
    
    private async Task ConfirmClearWeek()
    {
        var weekStart = UI.CurrentWeekStart;
        var weekEnd = weekStart.AddDays(6);
        
        var list = await CalendarBookingService.GetBookingsForWeekAsync(weekStart);
        foreach (var b in list)
        {
            await CalendarBookingService.DeleteBookingAsync(b.Id);
        }
        
        clearWeekConfirmOpen = false;
        UI.RaiseChanged();
    }
    
    private async Task CopyWeekToClipboard()
    {
        // Copy all calendar bookings for the currently shown week
        var sourceWeekStart = UI.CurrentWeekStart;
        var bookings = await CalendarBookingService.GetBookingsForWeekAsync(sourceWeekStart);
        // Store a lightweight copy in UI clipboard (detach EF entities)
        UI.ClipboardWeek = bookings.Select(b => new SchedulerMVP.Data.Entities.CalendarBooking
        {
            AreaId = b.AreaId,
            GroupId = b.GroupId,
            Date = b.Date,
            StartMin = b.StartMin,
            EndMin = b.EndMin,
            Notes = b.Notes,
            ContactName = b.ContactName,
            ContactPhone = b.ContactPhone,
            ContactEmail = b.ContactEmail,
            SourceTemplateId = b.SourceTemplateId
        }).ToList();
        UI.ClipboardWeekStart = sourceWeekStart;
        moreMenuOpen = false;
        UI.RaiseChanged();
    }
    
    private async Task PasteWeekFromClipboard()
    {
        if (UI.ClipboardWeek == null || UI.ClipboardWeek.Count == 0)
        {
            moreMenuOpen = false;
            return;
        }
        var targetWeekStart = UI.CurrentWeekStart;
        foreach (var src in UI.ClipboardWeek)
        {
            // Map source booking's weekday to the target week's same weekday
            var dayIndex0 = (int)src.Date.DayOfWeek; // Sunday=0..Saturday=6
            var mondayBased = (dayIndex0 + 6) % 7;   // Monday=0..Sunday=6
            var targetDate = targetWeekStart.AddDays(mondayBased);
            var newBooking = new SchedulerMVP.Data.Entities.CalendarBooking
            {
                AreaId = src.AreaId,
                GroupId = src.GroupId,
                Date = targetDate,
                StartMin = src.StartMin,
                EndMin = src.EndMin,
                Notes = src.Notes,
                ContactName = src.ContactName,
                ContactPhone = src.ContactPhone,
                ContactEmail = src.ContactEmail,
                SourceTemplateId = src.SourceTemplateId,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            };
            await CalendarBookingService.CreateBookingAsync(newBooking);
        }
        moreMenuOpen = false;
        UI.RaiseChanged();
    }
    
    private bool CanPasteWeek()
    {
        return UI.ClipboardWeek != null && UI.ClipboardWeek.Count > 0;
    }


    private void OpenCopyTemplateModal()
    {
        moreMenuOpen = false;
        UI.ShouldOpenCopyTemplateModal = true;
        UI.RaiseChanged();
    }

    private void OnViewModeChanged(ChangeEventArgs e)
    {
        var isDay = bool.Parse(e.Value?.ToString() ?? "false");
        // Preserve the currently navigated week/day instead of jumping to today's
        var current = UI.CurrentWeekStart;
        UI.IsDayView = isDay;
        if (isDay)
        {
            // Switching Week -> Day: show Monday of the currently displayed week
            var daysSinceMonday = ((int)current.DayOfWeek + 6) % 7;
            UI.CurrentWeekStart = current.AddDays(-daysSinceMonday);
        }
        else
        {
            // Switching Day -> Week: show the week that contains the current day
            var daysSinceMonday = ((int)current.DayOfWeek + 6) % 7;
            UI.CurrentWeekStart = current.AddDays(-daysSinceMonday);
        }
        UI.RaiseChanged();
    }

    private void GoToToday()
    {
        var today = DateOnly.FromDateTime(DateTime.Today);
        // Find the Monday of the current week for week view, or just use today for day view
        var monday = today.AddDays(-(int)today.DayOfWeek + (int)DayOfWeek.Monday);
        UI.CurrentWeekStart = UI.IsDayView ? today : monday;
        UI.RaiseChanged();
    }
}

@if (clearWeekConfirmOpen)
{
    <div @onclick="CloseClearWeekConfirm" style="position:fixed; inset:0; background:rgba(0,0,0,0.5); z-index:6000; display:flex; align-items:center; justify-content:center;">
        <div @onclick:stopPropagation="true" style="background:#fff; border-radius:12px; padding:24px; max-width:400px; width:90%; box-shadow:0 20px 40px rgba(0,0,0,0.15);">
            <h3 style="margin:0 0 16px 0; font-size:18px; font-weight:600; color:#0b1e34;">Rensa vecka</h3>
            <p style="margin:0 0 20px 0; color:#64748b; line-height:1.5;">@clearWeekConfirmText</p>
            <div style="display:flex; gap:12px; justify-content:flex-end;">
                <button @onclick="CloseClearWeekConfirm" style="padding:8px 16px; border:1px solid #e5e7eb; background:#fff; color:#64748b; border-radius:6px; cursor:pointer; font-weight:500;">Avbryt</button>
                <button @onclick="ConfirmClearWeek" style="padding:8px 16px; border:none; background:#dc2626; color:#fff; border-radius:6px; cursor:pointer; font-weight:500;">Rensa</button>
            </div>
        </div>
    </div>
}



