@using SchedulerMVP.Data.Entities
@using Microsoft.EntityFrameworkCore
@inject SchedulerMVP.Data.AppDbContext Db
@inject SchedulerMVP.Services.UserContextService UserContext
@inject SchedulerMVP.Services.UIState UI
@inject SchedulerMVP.Services.IConflictService ConflictService

@if (IsOpen && EditingTemplate != null)
{
    <div class="modal-backdrop" style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.5); z-index: 2000;" @onclick="Close"></div>

    <div class="bm-modal" @onclick="CloseDropdowns">
        <div class="bm-header">
            <h2 class="bm-title">Ändra bokning</h2>
        </div>

        @* Group Selection *@
        <div class="bm-field">
            <label class="bm-label">Grupp</label>
            <select @bind="SelectedGroupId" @bind:event="onchange" class="bm-input">
                <option value="">Välj grupp</option>
                @if (groups != null)
                {
                    @foreach (var g in groups)
                    {
                        <option value="@g.Id">@g.Name</option>
                    }
                }
            </select>
        </div>

        @* Place Selection *@
        <div class="bm-field">
            <label class="bm-label">Plats</label>
            <div class="bm-custom-select" @onclick:stopPropagation="true">
                <div class="bm-custom-select-trigger" @onclick="TogglePlaceDropdown">
                    @if (SelectedPlaceId.HasValue && AvailablePlaces != null)
                    {
                        var selectedPlace = AvailablePlaces.FirstOrDefault(p => p.Id == SelectedPlaceId.Value);
                        if (selectedPlace != null)
                        {
                            <span class="bm-place-name">@selectedPlace.Name</span>
                        }
                    }
                    else
                    {
                        <span class="bm-placeholder">Välj plats</span>
                    }
                    <span class="bm-dropdown-icon @(showPlaceDropdown ? "open" : "")"></span>
                </div>
                
                @if (showPlaceDropdown && AvailablePlaces != null)
                {
                    <div class="bm-custom-select-dropdown">
                        @foreach (var place in AvailablePlaces)
                        {
                            var isSelected = SelectedPlaceId == place.Id;
                            <div class="bm-dropdown-option @(isSelected ? "selected" : "")" 
                                 @onclick="() => SelectPlace(place.Id)">
                                <span class="bm-place-name">@place.Name</span>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>

        @* Area Selection *@
        <div class="bm-field">
            <label class="bm-label">Yta</label>
            <div class="bm-custom-select" @onclick:stopPropagation="true">
                <div class="bm-custom-select-trigger" @onclick="ToggleAreaDropdown">
                    @if (SelectedAreaId.HasValue && AvailableAreas != null)
                    {
                        var selectedArea = AvailableAreas.FirstOrDefault(a => a.Id == SelectedAreaId.Value);
                        if (selectedArea != null)
                        {
                            var isAvailable = GetAreaAvailability(selectedArea.Id);
                            <div class="bm-selected-area">
                                <span class="bm-availability-icon @(isAvailable ? "available" : "unavailable")"></span>
                                <span class="bm-area-name">@selectedArea.Name</span>
                                @if (!isAvailable)
                                {
                                    <span class="bm-unavailable-text">(Upptagen)</span>
                                }
                            </div>
                        }
                    }
                    else
                    {
                        <span class="bm-placeholder">Välj yta</span>
                    }
                    <span class="bm-dropdown-icon @(showAreaDropdown ? "open" : "")"></span>
                </div>
                
                @if (showAreaDropdown && AvailableAreas != null)
                {
                    <div class="bm-custom-select-dropdown">
                        @foreach (var area in AvailableAreas)
                        {
                            var isAvailable = GetAreaAvailability(area.Id);
                            var isSelected = SelectedAreaId == area.Id;
                            <div class="bm-dropdown-option @(isSelected ? "selected" : "") @(isAvailable ? "available" : "unavailable")" 
                                 @onclick="() => SelectArea(area.Id)">
                                <span class="bm-availability-icon @(isAvailable ? "available" : "unavailable")"></span>
                                <span class="bm-area-name">@area.Name</span>
                                @if (!isAvailable)
                                {
                                    <span class="bm-unavailable-text">(Upptagen)</span>
                                }
                            </div>
                        }
                    </div>
                }
            </div>
        </div>

        @* Day selection (single choice) *@
        <div class="bm-field">
            <div class="bm-days">
                @for (var checkboxDay = 1; checkboxDay <= 7; checkboxDay++)
                {
                    var dayIndex = checkboxDay;
                    var dayName = DayShort(dayIndex);
                    var isChecked = SelectedDay == dayIndex;
                    <div class="bm-day">
                        <div class="bm-day-label">@dayName</div>
                        <input class="bm-checkbox" type="checkbox" checked="@isChecked" @onchange="(e) => OnEditDayChanged(dayIndex, e.Value)" />
                    </div>
                }
            </div>
        </div>

        @* Time selection *@
        <div class="bm-field">
            <div class="bm-time-row">
                <div>
                    <label class="bm-label">Starttid</label>
                    <div class="bm-select-wrap">
                        <input type="time" value="@StartTime" @onchange="OnStartTimeChanged" class="bm-input" />
                    </div>
                </div>
                <div>
                    <label class="bm-label">Sluttid</label>
                    <div class="bm-select-wrap">
                        <input type="time" value="@EndTime" @onchange="OnEndTimeChanged" class="bm-input" />
                    </div>
                </div>
            </div>
        </div>
        @* Övrigt (toggle) *@
        <div class="bm-field" style="margin-top:12px;">
            <button type="button" @onclick="ToggleExtras" style="background:transparent;border:none;color:#0b1e34;cursor:pointer;padding:0;font-weight:600;text-align:left;">@(showExtras ? "Dölj alternativ" : "Fler alternativ")</button>
        </div>
        @if (showExtras)
        {
            <div class="bm-field">
                <div style="display:grid;gap:12px;grid-template-columns:1fr;">
                    <div>
                        <label class="bm-label">Notering</label>
                        <textarea class="bm-input" rows="3" @bind="Notes"></textarea>
                    </div>
                    <div style="display:grid;grid-template-columns:1fr 1fr;gap:12px;">
                        <div>
                            <label class="bm-label">Kontaktperson</label>
                            <input class="bm-input" @bind="ContactName" />
                        </div>
                        <div>
                            <label class="bm-label">Telefon</label>
                            <input class="bm-input" @bind="ContactPhone" />
                        </div>
                    </div>
                    <div>
                        <label class="bm-label">E‑post</label>
                        <input class="bm-input" @bind="ContactEmail" />
                    </div>
                </div>
            </div>
        }
        @if (conflictMessages.Count > 0)
        {
            <div class="bm-field" style="margin-top:4px;">
                <div style="padding:10px 12px;border:1px solid #fecaca;background:#fff1f2;color:#7f1d1d;border-radius:10px;font-size:13px;">
                    <div style="font-weight:700;margin-bottom:4px;">Konflikt</div>
                    @foreach (var msg in conflictMessages)
                    {
                        <div>• @msg</div>
                    }
                </div>
            </div>
        }

        @* Action Buttons *@
        <div class="bm-actions">
            <button type="button" @onclick="Delete" class="btn-danger" style="margin-right: auto;">Ta bort</button>
            <button type="button" @onclick="Close" class="btn-outline">Avbryt</button>
            <button type="button" @onclick="Save" class="btn-primary" disabled="@hasConflicts">Spara</button>
        </div>

        <style>
            /* ============================================
               BOOKING MODAL - STRUCTURE
               ============================================ */
            .bm-modal{position:fixed;top:50px;left:50%;transform:translateX(-50%);background:#fff;color:#0f1720;padding:28px 28px 0 28px;z-index:4000;border:1px solid #e6e7ea;border-radius:12px;min-width:560px;max-width:720px;width:90vw;box-shadow:0 8px 28px rgba(16,24,40,.18);max-height:80vh;overflow-y:auto}
            .bm-header{position:sticky;top:0;background:#fff;z-index:12;padding-bottom:12px;margin-bottom:12px}
            .bm-title{margin:0 0 12px 0;font-size:20px;font-weight:800;letter-spacing:-.02em}
            
            /* ============================================
               BOOKING MODAL - INPUT STYLING
               All inputs use .bm-input for consistency
               All inputs have same height (40px) except textarea (80px)
               ============================================ */
            .bm-input{width:100%;padding:10px 12px;border-radius:4px;border:1px solid #dcdee2;background-color:#f3f5f7;box-shadow:0 2px 8px 0 rgba(0,0,0,0.02);font-size:12px;font-family:Inter,system-ui,-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,"Noto Sans",sans-serif;box-sizing:border-box;min-height:40px}
            .bm-input[type="time"],.bm-input[type="date"]{padding:10px 12px}
            .bm-input[type="time"]::-webkit-calendar-picker-indicator,.bm-input[type="date"]::-webkit-calendar-picker-indicator{opacity:1;cursor:pointer}
            textarea.bm-input{min-height:80px;padding:10px 12px;resize:vertical}
            select.bm-input{appearance:none;-webkit-appearance:none;-moz-appearance:none;cursor:pointer;padding-right:40px;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' height='20' viewBox='0 0 24 24' width='20'%3E%3Cpath d='M7 10l5 5 5-5z' fill='%23666'/%3E%3C/svg%3E");background-repeat:no-repeat;background-position:right 8px center;background-size:20px 20px}
            
            /* ============================================
               BOOKING MODAL - DAY SELECTION
               ============================================ */
            .bm-days{display:flex;flex-wrap:wrap;gap:12px;justify-content:flex-start;margin-top:4px;margin-bottom:4px}
            .bm-day{display:flex;flex-direction:column;align-items:center;width:44px}
            .bm-day-label{font-weight:600;margin-bottom:6px;color:#0f1720;font-size:12px;text-align:center}
            .bm-checkbox{appearance:none;width:20px;height:20px;border:1px solid #cbd5e1;border-radius:6px;background:#fff;cursor:pointer;position:relative;display:inline-block}
            .bm-checkbox:checked{background:#1761a5;border-color:#1761a5}
            .bm-checkbox:checked::after{content:"";position:absolute;left:5px;top:2px;width:5px;height:10px;border:solid #fff;border-width:0 2px 2px 0;transform:rotate(45deg)}
            
            /* ============================================
               BOOKING MODAL - TIME SELECTION
               ============================================ */
            .bm-time-row{display:grid;grid-template-columns:1fr 1fr;gap:16px}
            .bm-time-row > div{box-sizing:border-box;min-width:0}
            
            /* ============================================
               BOOKING MODAL - CUSTOM SELECTS (Place/Area)
               ============================================ */
            .bm-custom-select{position:relative;width:100%;box-sizing:border-box}
            .bm-custom-select-trigger{display:flex;align-items:center;justify-content:space-between;padding:10px 12px;border:1px solid #dcdee2;border-radius:4px;background-color:#f3f5f7;cursor:pointer;box-shadow:0 2px 8px 0 rgba(0,0,0,0.02);font-size:12px;min-height:40px;box-sizing:border-box;width:100%}
            .bm-custom-select-trigger:hover{border-color:#cbd5e1}
            .bm-selected-area{display:flex;align-items:center;gap:8px;flex:1}
            .bm-placeholder{color:#9ca3af}
            .bm-place-name{flex:1;font-size:12px;font-weight:400;color:#000}
            .bm-area-name{flex:1;font-size:12px;font-weight:400;color:#000}
            .bm-availability-icon{width:8px;height:8px;border-radius:50%;flex-shrink:0}
            .bm-availability-icon.available{background-color:#10b981}
            .bm-availability-icon.unavailable{background-color:#ef4444}
            .bm-unavailable-text{color:#9ca3af;font-size:11px}
            .bm-dropdown-icon{display:inline-block;width:20px;height:20px;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' height='20' viewBox='0 0 24 24' width='20'%3E%3Cpath d='M7 10l5 5 5-5z' fill='%23666'/%3E%3C/svg%3E");background-repeat:no-repeat;background-position:center;background-size:20px 20px;flex-shrink:0;transition:transform 0.2s}
            .bm-dropdown-icon.open{transform:rotate(180deg)}
            .bm-custom-select-dropdown{position:absolute;top:100%;left:0;right:0;background:#fff;border:1px solid #E3E8EE;border-radius:8px;box-shadow:0 4px 12px rgba(0,0,0,0.15);z-index:1000;max-height:200px;overflow-y:auto;margin-top:2px}
            .bm-dropdown-option{display:flex;align-items:center;gap:8px;padding:10px 12px;cursor:pointer;border-bottom:1px solid #f3f4f6;font-size:12px}
            .bm-dropdown-option:last-child{border-bottom:none}
            .bm-dropdown-option:hover{background-color:#f8fafc}
            .bm-dropdown-option.selected{background-color:#eff6ff;color:#1d4ed8}
            .bm-dropdown-option.unavailable{color:#9ca3af;cursor:not-allowed}
            .bm-dropdown-option.unavailable:hover{background-color:#fef2f2}
            
            /* ============================================
               BOOKING MODAL - ACTIONS
               ============================================ */
            .bm-actions{display:flex;gap:12px;justify-content:flex-end;margin-top:8px;position:sticky;bottom:0;background:#fff;border-top:1px solid #e6e7ea;padding-top:12px;padding-bottom:28px;z-index:10}
            .btn-outline{padding:10px 16px;border:1px solid #d1d5db;border-radius:10px;background:#fff;color:#0f1720;cursor:pointer}
            .btn-primary{padding:10px 16px;border:none;border-radius:10px;background:#1761a5;color:#fff;cursor:pointer}
            .btn-danger{padding:10px 16px;border:1px solid #dc2626;border-radius:10px;background:#fff;color:#dc2626;cursor:pointer}
            .bm-option-unavailable{color:#9ca3af;background-color:#f9fafb}
        </style>
    </div>
}

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public Guid? TemplateId { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnChanged { get; set; }

    private BookingTemplate? EditingTemplate;
    private string StartTime = "08:00";
    private string EndTime = "09:00";
    private List<string> timeOptions = new();
    private List<Group>? groups;
    private Guid? SelectedGroupId;
    private int SelectedDay;
    private string? placeName;
    private int currentDurationMinutes = 60; // Track current duration
    private bool isUpdatingTime = false; // Prevent recursive updates
    private bool hasConflicts = false;
    private List<string> conflictMessages = new();
    private string? Notes;
    private string? ContactName;
    private string? ContactPhone;
    private string? ContactEmail;
    private bool showExtras = false;
    
    // Place selection properties
    private Guid? SelectedPlaceId { get; set; }
    private List<Place>? AvailablePlaces;
    private bool showPlaceDropdown = false;
    
    // Area selection properties
    private Guid? SelectedAreaId { get; set; }
    private List<Area>? AvailableAreas;
    private Dictionary<Guid, bool> AreaAvailability = new();
    private bool showAreaDropdown = false;

    protected override async Task OnParametersSetAsync()
    {
        if (IsOpen && TemplateId.HasValue)
        {
            EditingTemplate = await Db.BookingTemplates
                .Include(b => b.Area)
                .Include(b => b.Group)
                .FirstOrDefaultAsync(b => b.Id == TemplateId.Value);

            if (EditingTemplate != null)
            {
                // Build time options based on place snap (fallback 30 min)
                var snap = 30;
                if (EditingTemplate.Area != null)
                {
                    var place = await Db.Places.FirstOrDefaultAsync(p => p.Id == EditingTemplate.Area.PlaceId);
                    if (place != null && place.SnapMin > 0) snap = place.SnapMin;
                    placeName = place?.Name;
                }
                timeOptions = GenerateTimes(snap);
                StartTime = MinutesToString(EditingTemplate.StartMin);
                EndTime = MinutesToString(EditingTemplate.EndMin);
                currentDurationMinutes = EditingTemplate.EndMin - EditingTemplate.StartMin;
                SelectedGroupId = EditingTemplate.GroupId;
                SelectedDay = EditingTemplate.DayOfWeek;

                // Load groups for dropdown
                var userId = UserContext.GetCurrentUserId();
                var isAdmin = await UserContext.IsAdminAsync();
                var query = Db.Groups.AsQueryable();
                if (!isAdmin && !string.IsNullOrEmpty(userId))
                {
                    query = query.Where(g => g.UserId == userId || g.UserId == null);
                }
                groups = await query.OrderBy(g => g.Name).ToListAsync();
                
                // Load places and areas
                await LoadAvailablePlacesAsync();
                if (EditingTemplate.Area != null)
                {
                    SelectedPlaceId = EditingTemplate.Area.PlaceId;
                    SelectedAreaId = EditingTemplate.Area.Id;
                    await LoadAvailableAreasAsync();
                }
                Notes = EditingTemplate.Notes;
                ContactName = EditingTemplate.ContactName;
                ContactPhone = EditingTemplate.ContactPhone;
                ContactEmail = EditingTemplate.ContactEmail;
                // Auto-expand extras if any extra fields contain data
                showExtras = !string.IsNullOrWhiteSpace(Notes)
                             || !string.IsNullOrWhiteSpace(ContactName)
                             || !string.IsNullOrWhiteSpace(ContactPhone)
                             || !string.IsNullOrWhiteSpace(ContactEmail);
                await RecheckConflictsAsync();
            }
        }
    }

    private async Task OnStartTimeChanged(ChangeEventArgs e)
    {
        if (isUpdatingTime) return;
        
        StartTime = e.Value?.ToString() ?? "08:00";
        isUpdatingTime = true;
        // Update end time to maintain current duration
        EndTime = AddMinutesToTime(StartTime, currentDurationMinutes);
        isUpdatingTime = false;
        await RecheckConflictsAsync();
        await CheckAllAreasAvailabilityAsync();
        StateHasChanged();
    }
    
    private async Task OnEndTimeChanged(ChangeEventArgs e)
    {
        if (isUpdatingTime) return;
        
        EndTime = e.Value?.ToString() ?? "09:00";
        // Update current duration based on new end time
        currentDurationMinutes = GetDurationInMinutes(StartTime, EndTime);
        await RecheckConflictsAsync();
        await CheckAllAreasAvailabilityAsync();
        StateHasChanged();
    }
    
    private async Task LoadAvailablePlacesAsync()
    {
        try
        {
            AvailablePlaces = await Db.Places.OrderBy(p => p.Name).ToListAsync();
        }
        catch (Exception ex)
        {
            // Console.WriteLine($"Error loading places: {ex.Message}");
        }
    }
    
    private async Task LoadAvailableAreasAsync()
    {
        if (!SelectedPlaceId.HasValue) return;
        
        try
        {
            AvailableAreas = await Db.Areas
                .Where(a => a.PlaceId == SelectedPlaceId.Value)
                .OrderBy(a => a.Path)
                .ToListAsync();
            
            await CheckAllAreasAvailabilityAsync();
        }
        catch (Exception ex)
        {
            // Console.WriteLine($"Error loading areas: {ex.Message}");
        }
    }
    
    private async Task CheckAllAreasAvailabilityAsync()
    {
        if (AvailableAreas == null) return;
        
        AreaAvailability.Clear();
        
        // Parse current time selection
        var sp = StartTime.Split(':'); 
        var ep = EndTime.Split(':');
        var s = int.Parse(sp[0]) * 60 + int.Parse(sp[1]);
        var e = int.Parse(ep[0]) * 60 + int.Parse(ep[1]);
        
        foreach (var area in AvailableAreas)
        {
            bool isAvailable = true;
            
            if (UI.IsCalendarViewMode)
            {
                // Calendar mode: check conflicts for specific date
                var conflicts = await ConflictService.CheckAreaConflictsAsync(area.Id, SelectedDay, s, e, EditingTemplate?.Id, null);
                if (conflicts.Count > 0)
                {
                    isAvailable = false;
                }
            }
            else
            {
                // Weekplanner mode: check conflicts for selected day
                if (UI.SelectedTemplateId.HasValue)
                {
                    var conflicts = await ConflictService.CheckAreaConflictsAsync(area.Id, SelectedDay, s, e, EditingTemplate?.Id, UI.SelectedTemplateId.Value);
                    if (conflicts.Count > 0)
                    {
                        isAvailable = false;
                    }
                }
            }
            
            AreaAvailability[area.Id] = isAvailable;
        }
    }
    
    private bool GetAreaAvailability(Guid areaId)
    {
        return AreaAvailability.TryGetValue(areaId, out bool isAvailable) ? isAvailable : true;
    }
    
    private void TogglePlaceDropdown()
    {
        showPlaceDropdown = !showPlaceDropdown;
        StateHasChanged();
    }
    
    private void ToggleAreaDropdown()
    {
        showAreaDropdown = !showAreaDropdown;
        StateHasChanged();
    }
    
    private async Task SelectPlace(Guid placeId)
    {
        SelectedPlaceId = placeId;
        showPlaceDropdown = false;
        
        // Clear selected area when place changes
        SelectedAreaId = null;
        AvailableAreas = null;
        
        // Load areas for the new place
        await LoadAvailableAreasAsync();
        
        await CheckAllAreasAvailabilityAsync();
        await RecheckConflictsAsync();
        StateHasChanged();
    }
    
    private async Task SelectArea(Guid areaId)
    {
        SelectedAreaId = areaId;
        showAreaDropdown = false;
        
        await CheckAllAreasAvailabilityAsync();
        await RecheckConflictsAsync();
        StateHasChanged();
    }
    
    private string AddMinutesToTime(string time, int minutes)
    {
        var parts = time.Split(':');
        var totalMinutes = int.Parse(parts[0]) * 60 + int.Parse(parts[1]) + minutes;
        var hours = totalMinutes / 60;
        var mins = totalMinutes % 60;
        
        // Handle day overflow
        if (hours >= 24)
        {
            hours = hours % 24;
        }
        
        return $"{hours:00}:{mins:00}";
    }
    
    private int GetDurationInMinutes(string startTime, string endTime)
    {
        var startParts = startTime.Split(':');
        var endParts = endTime.Split(':');
        var startMinutes = int.Parse(startParts[0]) * 60 + int.Parse(startParts[1]);
        var endMinutes = int.Parse(endParts[0]) * 60 + int.Parse(endParts[1]);
        
        // Handle day overflow
        if (endMinutes < startMinutes)
        {
            endMinutes += 24 * 60; // Add 24 hours
        }
        
        return endMinutes - startMinutes;
    }

    private async Task Save()
    {
        if (EditingTemplate == null) return;
        if (hasConflicts) return;
        var (s, e) = ParseTimes(StartTime, EndTime);
        EditingTemplate.StartMin = s;
        EditingTemplate.EndMin = e;
        if (SelectedGroupId.HasValue) EditingTemplate.GroupId = SelectedGroupId.Value;
        if (SelectedAreaId.HasValue) EditingTemplate.AreaId = SelectedAreaId.Value;
        if (SelectedDay < 1) SelectedDay = 1; if (SelectedDay > 7) SelectedDay = 7; EditingTemplate.DayOfWeek = SelectedDay;
        EditingTemplate.Notes = string.IsNullOrWhiteSpace(Notes) ? null : Notes;
        EditingTemplate.ContactName = ContactName;
        EditingTemplate.ContactPhone = ContactPhone;
        EditingTemplate.ContactEmail = ContactEmail;
        EditingTemplate.UpdatedAt = DateTime.UtcNow;
        await Db.SaveChangesAsync();
        await OnChanged.InvokeAsync();
        await Close();
    }

    private async Task Delete()
    {
        if (EditingTemplate == null) return;
        Db.BookingTemplates.Remove(EditingTemplate);
        await Db.SaveChangesAsync();
        await OnChanged.InvokeAsync();
        await Close();
    }

    private Task Close() => OnClose.InvokeAsync();

    private static (int start, int end) ParseTimes(string start, string end)
    {
        var sp = start.Split(':');
        var ep = end.Split(':');
        var s = int.Parse(sp[0]) * 60 + int.Parse(sp[1]);
        var e = int.Parse(ep[0]) * 60 + int.Parse(ep[1]);
        if (e <= s) e = s + 30; // guard minimal range
        return (s, e);
    }

    private static string MinutesToString(int m)
    {
        var h = m / 60; var mm = m % 60; return $"{h:00}:{mm:00}";
    }

    private static string DayName(int d) => new[] {"","Måndag","Tisdag","Onsdag","Torsdag","Fredag","Lördag","Söndag"}[d];
    private static string DayShort(int d) => new[] {"","Mån","Tis","Ons","Tor","Fre","Lör","Sön"}[d];

    private async Task OnEditDayChanged(int day, object? value)
    {
        if (value is bool isChecked)
        {
            if (isChecked) SelectedDay = day; else if (SelectedDay == day) SelectedDay = 0;
            await CheckAllAreasAvailabilityAsync();
            await RecheckConflictsAsync();
            StateHasChanged();
        }
    }

    private static List<string> GenerateTimes(int stepMin)
    {
        var list = new List<string>();
        for (var m = 0; m < 24 * 60; m += Math.Max(5, stepMin))
        {
            list.Add(MinutesToString(m));
        }
        list.Add("24:00"); // allow selecting end at midnight
        return list;
    }
}

@code {
    private async Task RecheckConflictsAsync()
    {
        conflictMessages.Clear(); hasConflicts = false;
        var areaId = SelectedAreaId ?? EditingTemplate?.Area?.Id;
        if (areaId == null) { StateHasChanged(); return; }
        var (s,e) = ParseTimes(StartTime, EndTime);
        var day = SelectedDay > 0 ? SelectedDay : EditingTemplate?.DayOfWeek ?? 1;
        var conflicts = await ConflictService.CheckAreaConflictsAsync(areaId.Value, day, s, e, EditingTemplate?.Id, EditingTemplate?.ScheduleTemplateId);
        if (conflicts.Count > 0)
        {
            hasConflicts = true;
            foreach (var c in conflicts)
            {
                var from = $"{c.StartMin/60:00}:{c.StartMin%60:00}"; var to = $"{c.EndMin/60:00}:{c.EndMin%60:00}";
                conflictMessages.Add($"{DayShort(c.DayOfWeek)} • {from}-{to} • {c.OtherAreaName} ({c.OtherGroupName})");
            }
        }
        StateHasChanged();
    }
    private void ToggleExtras() => showExtras = !showExtras;
    
    private void CloseDropdowns()
    {
        showPlaceDropdown = false;
        showAreaDropdown = false;
        StateHasChanged();
    }
}


